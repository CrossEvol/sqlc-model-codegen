// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqliteDao

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countCategoriesStmt, err = db.PrepareContext(ctx, CountCategories); err != nil {
		return nil, fmt.Errorf("error preparing query CountCategories: %w", err)
	}
	if q.countDetailsStmt, err = db.PrepareContext(ctx, CountDetails); err != nil {
		return nil, fmt.Errorf("error preparing query CountDetails: %w", err)
	}
	if q.countGroupsStmt, err = db.PrepareContext(ctx, CountGroups); err != nil {
		return nil, fmt.Errorf("error preparing query CountGroups: %w", err)
	}
	if q.countPostsStmt, err = db.PrepareContext(ctx, CountPosts); err != nil {
		return nil, fmt.Errorf("error preparing query CountPosts: %w", err)
	}
	if q.countTagsStmt, err = db.PrepareContext(ctx, CountTags); err != nil {
		return nil, fmt.Errorf("error preparing query CountTags: %w", err)
	}
	if q.countTagsByParentIdStmt, err = db.PrepareContext(ctx, CountTagsByParentId); err != nil {
		return nil, fmt.Errorf("error preparing query CountTagsByParentId: %w", err)
	}
	if q.countTodosStmt, err = db.PrepareContext(ctx, CountTodos); err != nil {
		return nil, fmt.Errorf("error preparing query CountTodos: %w", err)
	}
	if q.countTodosOnGroupsStmt, err = db.PrepareContext(ctx, CountTodosOnGroups); err != nil {
		return nil, fmt.Errorf("error preparing query CountTodosOnGroups: %w", err)
	}
	if q.countUsersStmt, err = db.PrepareContext(ctx, CountUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, CreateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createDetailStmt, err = db.PrepareContext(ctx, CreateDetail); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDetail: %w", err)
	}
	if q.createGroupStmt, err = db.PrepareContext(ctx, CreateGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroup: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, CreatePost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createTagStmt, err = db.PrepareContext(ctx, CreateTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTag: %w", err)
	}
	if q.createTodoStmt, err = db.PrepareContext(ctx, CreateTodo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTodo: %w", err)
	}
	if q.createTodosOnGroupStmt, err = db.PrepareContext(ctx, CreateTodosOnGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTodosOnGroup: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, CreateUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, DeleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteDetailStmt, err = db.PrepareContext(ctx, DeleteDetail); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDetail: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, DeleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, DeletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, DeleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.deleteTodoStmt, err = db.PrepareContext(ctx, DeleteTodo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTodo: %w", err)
	}
	if q.deleteTodosOnGroupStmt, err = db.PrepareContext(ctx, DeleteTodosOnGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTodosOnGroup: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, DeleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCategoriesStmt, err = db.PrepareContext(ctx, GetCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategories: %w", err)
	}
	if q.getCategoriesByIdsStmt, err = db.PrepareContext(ctx, GetCategoriesByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoriesByIds: %w", err)
	}
	if q.getCategoryStmt, err = db.PrepareContext(ctx, GetCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategory: %w", err)
	}
	if q.getDetailByIdStmt, err = db.PrepareContext(ctx, GetDetailById); err != nil {
		return nil, fmt.Errorf("error preparing query GetDetailById: %w", err)
	}
	if q.getDetailByTodoIdStmt, err = db.PrepareContext(ctx, GetDetailByTodoId); err != nil {
		return nil, fmt.Errorf("error preparing query GetDetailByTodoId: %w", err)
	}
	if q.getDetailsStmt, err = db.PrepareContext(ctx, GetDetails); err != nil {
		return nil, fmt.Errorf("error preparing query GetDetails: %w", err)
	}
	if q.getDetailsByIdsStmt, err = db.PrepareContext(ctx, GetDetailsByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetDetailsByIds: %w", err)
	}
	if q.getDetailsByTodoIdsStmt, err = db.PrepareContext(ctx, GetDetailsByTodoIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetDetailsByTodoIds: %w", err)
	}
	if q.getGroupStmt, err = db.PrepareContext(ctx, GetGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroup: %w", err)
	}
	if q.getGroupsStmt, err = db.PrepareContext(ctx, GetGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroups: %w", err)
	}
	if q.getGroupsByIdsStmt, err = db.PrepareContext(ctx, GetGroupsByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupsByIds: %w", err)
	}
	if q.getPostStmt, err = db.PrepareContext(ctx, GetPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetPost: %w", err)
	}
	if q.getPostsStmt, err = db.PrepareContext(ctx, GetPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetPosts: %w", err)
	}
	if q.getPostsByIdsStmt, err = db.PrepareContext(ctx, GetPostsByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByIds: %w", err)
	}
	if q.getTagStmt, err = db.PrepareContext(ctx, GetTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetTag: %w", err)
	}
	if q.getTagsStmt, err = db.PrepareContext(ctx, GetTags); err != nil {
		return nil, fmt.Errorf("error preparing query GetTags: %w", err)
	}
	if q.getTagsByIdsStmt, err = db.PrepareContext(ctx, GetTagsByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsByIds: %w", err)
	}
	if q.getTagsByParentIdStmt, err = db.PrepareContext(ctx, GetTagsByParentId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsByParentId: %w", err)
	}
	if q.getTodoStmt, err = db.PrepareContext(ctx, GetTodo); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodo: %w", err)
	}
	if q.getTodosStmt, err = db.PrepareContext(ctx, GetTodos); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodos: %w", err)
	}
	if q.getTodosByIdsStmt, err = db.PrepareContext(ctx, GetTodosByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodosByIds: %w", err)
	}
	if q.getTodosOnGroupByGroupIdStmt, err = db.PrepareContext(ctx, GetTodosOnGroupByGroupId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodosOnGroupByGroupId: %w", err)
	}
	if q.getTodosOnGroupByTodoIdStmt, err = db.PrepareContext(ctx, GetTodosOnGroupByTodoId); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodosOnGroupByTodoId: %w", err)
	}
	if q.getTodosOnGroupsStmt, err = db.PrepareContext(ctx, GetTodosOnGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodosOnGroups: %w", err)
	}
	if q.getTodosOnGroupsByGroupIdsStmt, err = db.PrepareContext(ctx, GetTodosOnGroupsByGroupIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodosOnGroupsByGroupIds: %w", err)
	}
	if q.getTodosOnGroupsByTodoIdsStmt, err = db.PrepareContext(ctx, GetTodosOnGroupsByTodoIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetTodosOnGroupsByTodoIds: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, GetUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, GetUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.getUsersByIdsStmt, err = db.PrepareContext(ctx, GetUsersByIds); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByIds: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, UpdateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	if q.updateDetailStmt, err = db.PrepareContext(ctx, UpdateDetail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDetail: %w", err)
	}
	if q.updateGroupStmt, err = db.PrepareContext(ctx, UpdateGroup); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroup: %w", err)
	}
	if q.updatePostStmt, err = db.PrepareContext(ctx, UpdatePost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePost: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, UpdateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	if q.updateTodoStmt, err = db.PrepareContext(ctx, UpdateTodo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTodo: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, UpdateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countCategoriesStmt != nil {
		if cerr := q.countCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCategoriesStmt: %w", cerr)
		}
	}
	if q.countDetailsStmt != nil {
		if cerr := q.countDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDetailsStmt: %w", cerr)
		}
	}
	if q.countGroupsStmt != nil {
		if cerr := q.countGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGroupsStmt: %w", cerr)
		}
	}
	if q.countPostsStmt != nil {
		if cerr := q.countPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPostsStmt: %w", cerr)
		}
	}
	if q.countTagsStmt != nil {
		if cerr := q.countTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTagsStmt: %w", cerr)
		}
	}
	if q.countTagsByParentIdStmt != nil {
		if cerr := q.countTagsByParentIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTagsByParentIdStmt: %w", cerr)
		}
	}
	if q.countTodosStmt != nil {
		if cerr := q.countTodosStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTodosStmt: %w", cerr)
		}
	}
	if q.countTodosOnGroupsStmt != nil {
		if cerr := q.countTodosOnGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTodosOnGroupsStmt: %w", cerr)
		}
	}
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createDetailStmt != nil {
		if cerr := q.createDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDetailStmt: %w", cerr)
		}
	}
	if q.createGroupStmt != nil {
		if cerr := q.createGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createTagStmt != nil {
		if cerr := q.createTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagStmt: %w", cerr)
		}
	}
	if q.createTodoStmt != nil {
		if cerr := q.createTodoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTodoStmt: %w", cerr)
		}
	}
	if q.createTodosOnGroupStmt != nil {
		if cerr := q.createTodosOnGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTodosOnGroupStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteDetailStmt != nil {
		if cerr := q.deleteDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDetailStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.deleteTodoStmt != nil {
		if cerr := q.deleteTodoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTodoStmt: %w", cerr)
		}
	}
	if q.deleteTodosOnGroupStmt != nil {
		if cerr := q.deleteTodosOnGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTodosOnGroupStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCategoriesStmt != nil {
		if cerr := q.getCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesStmt: %w", cerr)
		}
	}
	if q.getCategoriesByIdsStmt != nil {
		if cerr := q.getCategoriesByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesByIdsStmt: %w", cerr)
		}
	}
	if q.getCategoryStmt != nil {
		if cerr := q.getCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryStmt: %w", cerr)
		}
	}
	if q.getDetailByIdStmt != nil {
		if cerr := q.getDetailByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDetailByIdStmt: %w", cerr)
		}
	}
	if q.getDetailByTodoIdStmt != nil {
		if cerr := q.getDetailByTodoIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDetailByTodoIdStmt: %w", cerr)
		}
	}
	if q.getDetailsStmt != nil {
		if cerr := q.getDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDetailsStmt: %w", cerr)
		}
	}
	if q.getDetailsByIdsStmt != nil {
		if cerr := q.getDetailsByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDetailsByIdsStmt: %w", cerr)
		}
	}
	if q.getDetailsByTodoIdsStmt != nil {
		if cerr := q.getDetailsByTodoIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDetailsByTodoIdsStmt: %w", cerr)
		}
	}
	if q.getGroupStmt != nil {
		if cerr := q.getGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupStmt: %w", cerr)
		}
	}
	if q.getGroupsStmt != nil {
		if cerr := q.getGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupsStmt: %w", cerr)
		}
	}
	if q.getGroupsByIdsStmt != nil {
		if cerr := q.getGroupsByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupsByIdsStmt: %w", cerr)
		}
	}
	if q.getPostStmt != nil {
		if cerr := q.getPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostStmt: %w", cerr)
		}
	}
	if q.getPostsStmt != nil {
		if cerr := q.getPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsStmt: %w", cerr)
		}
	}
	if q.getPostsByIdsStmt != nil {
		if cerr := q.getPostsByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByIdsStmt: %w", cerr)
		}
	}
	if q.getTagStmt != nil {
		if cerr := q.getTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagStmt: %w", cerr)
		}
	}
	if q.getTagsStmt != nil {
		if cerr := q.getTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsStmt: %w", cerr)
		}
	}
	if q.getTagsByIdsStmt != nil {
		if cerr := q.getTagsByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsByIdsStmt: %w", cerr)
		}
	}
	if q.getTagsByParentIdStmt != nil {
		if cerr := q.getTagsByParentIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsByParentIdStmt: %w", cerr)
		}
	}
	if q.getTodoStmt != nil {
		if cerr := q.getTodoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodoStmt: %w", cerr)
		}
	}
	if q.getTodosStmt != nil {
		if cerr := q.getTodosStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosStmt: %w", cerr)
		}
	}
	if q.getTodosByIdsStmt != nil {
		if cerr := q.getTodosByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosByIdsStmt: %w", cerr)
		}
	}
	if q.getTodosOnGroupByGroupIdStmt != nil {
		if cerr := q.getTodosOnGroupByGroupIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosOnGroupByGroupIdStmt: %w", cerr)
		}
	}
	if q.getTodosOnGroupByTodoIdStmt != nil {
		if cerr := q.getTodosOnGroupByTodoIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosOnGroupByTodoIdStmt: %w", cerr)
		}
	}
	if q.getTodosOnGroupsStmt != nil {
		if cerr := q.getTodosOnGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosOnGroupsStmt: %w", cerr)
		}
	}
	if q.getTodosOnGroupsByGroupIdsStmt != nil {
		if cerr := q.getTodosOnGroupsByGroupIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosOnGroupsByGroupIdsStmt: %w", cerr)
		}
	}
	if q.getTodosOnGroupsByTodoIdsStmt != nil {
		if cerr := q.getTodosOnGroupsByTodoIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTodosOnGroupsByTodoIdsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.getUsersByIdsStmt != nil {
		if cerr := q.getUsersByIdsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByIdsStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	if q.updateDetailStmt != nil {
		if cerr := q.updateDetailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDetailStmt: %w", cerr)
		}
	}
	if q.updateGroupStmt != nil {
		if cerr := q.updateGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupStmt: %w", cerr)
		}
	}
	if q.updatePostStmt != nil {
		if cerr := q.updatePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	if q.updateTodoStmt != nil {
		if cerr := q.updateTodoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTodoStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	countCategoriesStmt            *sql.Stmt
	countDetailsStmt               *sql.Stmt
	countGroupsStmt                *sql.Stmt
	countPostsStmt                 *sql.Stmt
	countTagsStmt                  *sql.Stmt
	countTagsByParentIdStmt        *sql.Stmt
	countTodosStmt                 *sql.Stmt
	countTodosOnGroupsStmt         *sql.Stmt
	countUsersStmt                 *sql.Stmt
	createCategoryStmt             *sql.Stmt
	createDetailStmt               *sql.Stmt
	createGroupStmt                *sql.Stmt
	createPostStmt                 *sql.Stmt
	createTagStmt                  *sql.Stmt
	createTodoStmt                 *sql.Stmt
	createTodosOnGroupStmt         *sql.Stmt
	createUserStmt                 *sql.Stmt
	deleteCategoryStmt             *sql.Stmt
	deleteDetailStmt               *sql.Stmt
	deleteGroupStmt                *sql.Stmt
	deletePostStmt                 *sql.Stmt
	deleteTagStmt                  *sql.Stmt
	deleteTodoStmt                 *sql.Stmt
	deleteTodosOnGroupStmt         *sql.Stmt
	deleteUserStmt                 *sql.Stmt
	getCategoriesStmt              *sql.Stmt
	getCategoriesByIdsStmt         *sql.Stmt
	getCategoryStmt                *sql.Stmt
	getDetailByIdStmt              *sql.Stmt
	getDetailByTodoIdStmt          *sql.Stmt
	getDetailsStmt                 *sql.Stmt
	getDetailsByIdsStmt            *sql.Stmt
	getDetailsByTodoIdsStmt        *sql.Stmt
	getGroupStmt                   *sql.Stmt
	getGroupsStmt                  *sql.Stmt
	getGroupsByIdsStmt             *sql.Stmt
	getPostStmt                    *sql.Stmt
	getPostsStmt                   *sql.Stmt
	getPostsByIdsStmt              *sql.Stmt
	getTagStmt                     *sql.Stmt
	getTagsStmt                    *sql.Stmt
	getTagsByIdsStmt               *sql.Stmt
	getTagsByParentIdStmt          *sql.Stmt
	getTodoStmt                    *sql.Stmt
	getTodosStmt                   *sql.Stmt
	getTodosByIdsStmt              *sql.Stmt
	getTodosOnGroupByGroupIdStmt   *sql.Stmt
	getTodosOnGroupByTodoIdStmt    *sql.Stmt
	getTodosOnGroupsStmt           *sql.Stmt
	getTodosOnGroupsByGroupIdsStmt *sql.Stmt
	getTodosOnGroupsByTodoIdsStmt  *sql.Stmt
	getUserStmt                    *sql.Stmt
	getUsersStmt                   *sql.Stmt
	getUsersByIdsStmt              *sql.Stmt
	updateCategoryStmt             *sql.Stmt
	updateDetailStmt               *sql.Stmt
	updateGroupStmt                *sql.Stmt
	updatePostStmt                 *sql.Stmt
	updateTagStmt                  *sql.Stmt
	updateTodoStmt                 *sql.Stmt
	updateUserStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		countCategoriesStmt:            q.countCategoriesStmt,
		countDetailsStmt:               q.countDetailsStmt,
		countGroupsStmt:                q.countGroupsStmt,
		countPostsStmt:                 q.countPostsStmt,
		countTagsStmt:                  q.countTagsStmt,
		countTagsByParentIdStmt:        q.countTagsByParentIdStmt,
		countTodosStmt:                 q.countTodosStmt,
		countTodosOnGroupsStmt:         q.countTodosOnGroupsStmt,
		countUsersStmt:                 q.countUsersStmt,
		createCategoryStmt:             q.createCategoryStmt,
		createDetailStmt:               q.createDetailStmt,
		createGroupStmt:                q.createGroupStmt,
		createPostStmt:                 q.createPostStmt,
		createTagStmt:                  q.createTagStmt,
		createTodoStmt:                 q.createTodoStmt,
		createTodosOnGroupStmt:         q.createTodosOnGroupStmt,
		createUserStmt:                 q.createUserStmt,
		deleteCategoryStmt:             q.deleteCategoryStmt,
		deleteDetailStmt:               q.deleteDetailStmt,
		deleteGroupStmt:                q.deleteGroupStmt,
		deletePostStmt:                 q.deletePostStmt,
		deleteTagStmt:                  q.deleteTagStmt,
		deleteTodoStmt:                 q.deleteTodoStmt,
		deleteTodosOnGroupStmt:         q.deleteTodosOnGroupStmt,
		deleteUserStmt:                 q.deleteUserStmt,
		getCategoriesStmt:              q.getCategoriesStmt,
		getCategoriesByIdsStmt:         q.getCategoriesByIdsStmt,
		getCategoryStmt:                q.getCategoryStmt,
		getDetailByIdStmt:              q.getDetailByIdStmt,
		getDetailByTodoIdStmt:          q.getDetailByTodoIdStmt,
		getDetailsStmt:                 q.getDetailsStmt,
		getDetailsByIdsStmt:            q.getDetailsByIdsStmt,
		getDetailsByTodoIdsStmt:        q.getDetailsByTodoIdsStmt,
		getGroupStmt:                   q.getGroupStmt,
		getGroupsStmt:                  q.getGroupsStmt,
		getGroupsByIdsStmt:             q.getGroupsByIdsStmt,
		getPostStmt:                    q.getPostStmt,
		getPostsStmt:                   q.getPostsStmt,
		getPostsByIdsStmt:              q.getPostsByIdsStmt,
		getTagStmt:                     q.getTagStmt,
		getTagsStmt:                    q.getTagsStmt,
		getTagsByIdsStmt:               q.getTagsByIdsStmt,
		getTagsByParentIdStmt:          q.getTagsByParentIdStmt,
		getTodoStmt:                    q.getTodoStmt,
		getTodosStmt:                   q.getTodosStmt,
		getTodosByIdsStmt:              q.getTodosByIdsStmt,
		getTodosOnGroupByGroupIdStmt:   q.getTodosOnGroupByGroupIdStmt,
		getTodosOnGroupByTodoIdStmt:    q.getTodosOnGroupByTodoIdStmt,
		getTodosOnGroupsStmt:           q.getTodosOnGroupsStmt,
		getTodosOnGroupsByGroupIdsStmt: q.getTodosOnGroupsByGroupIdsStmt,
		getTodosOnGroupsByTodoIdsStmt:  q.getTodosOnGroupsByTodoIdsStmt,
		getUserStmt:                    q.getUserStmt,
		getUsersStmt:                   q.getUsersStmt,
		getUsersByIdsStmt:              q.getUsersByIdsStmt,
		updateCategoryStmt:             q.updateCategoryStmt,
		updateDetailStmt:               q.updateDetailStmt,
		updateGroupStmt:                q.updateGroupStmt,
		updatePostStmt:                 q.updatePostStmt,
		updateTagStmt:                  q.updateTagStmt,
		updateTodoStmt:                 q.updateTodoStmt,
		updateUserStmt:                 q.updateUserStmt,
	}
}
