// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: User.sql

package sqliteDao

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const CountUsers = `-- name: CountUsers :one
SELECT count(*)
FROM User
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countUsersStmt, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUser = `-- name: CreateUser :execresult
INSERT INTO User (name, password, email, emailVerified, image, role)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Name          *string    `db:"name" json:"name"`
	Password      *string    `db:"password" json:"password"`
	Email         *string    `db:"email" json:"email"`
	Emailverified *time.Time `db:"emailverified" json:"emailverified"`
	Image         *string    `db:"image" json:"image"`
	Role          string     `db:"role" json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, CreateUser,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.Emailverified,
		arg.Image,
		arg.Role,
	)
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE
FROM User
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, DeleteUser, id)
	return err
}

const GetUser = `-- name: GetUser :one
SELECT id, name, password, email, emailverified, image, role
FROM User
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Email,
		&i.Emailverified,
		&i.Image,
		&i.Role,
	)
	return i, err
}

const GetUsers = `-- name: GetUsers :many
SELECT id, name, password, email, emailverified, image, role
FROM User
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, GetUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.Emailverified,
			&i.Image,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUsersByIds = `-- name: GetUsersByIds :many
SELECT id, name, password, email, emailverified, image, role
FROM User
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetUsersByIds(ctx context.Context, ids []string) ([]User, error) {
	query := GetUsersByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Email,
			&i.Emailverified,
			&i.Image,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :execresult
UPDATE User
SET name          = CASE WHEN ? IS NOT NULL THEN ? ELSE name END,
    password      = CASE WHEN ? IS NOT NULL THEN ? ELSE password END,
    email         = CASE WHEN ? IS NOT NULL THEN ? ELSE email END,
    emailVerified = CASE WHEN ? IS NOT NULL THEN ? ELSE emailVerified END,
    image         = CASE WHEN ? IS NOT NULL THEN ? ELSE image END,
    role          = CASE WHEN ? IS NOT NULL THEN ? ELSE role END
WHERE id = ?
`

type UpdateUserParams struct {
	Name          interface{} `db:"name" json:"name"`
	Password      interface{} `db:"password" json:"password"`
	Email         interface{} `db:"email" json:"email"`
	EmailVerified interface{} `db:"emailVerified" json:"email_verified"`
	Image         interface{} `db:"image" json:"image"`
	Role          interface{} `db:"role" json:"role"`
	ID            string      `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserStmt, UpdateUser,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
		arg.Role,
		arg.ID,
	)
}
