// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Detail.sql

package sqliteDao

import (
	"context"
	"database/sql"
	"strings"
)

const CountDetails = `-- name: CountDetails :one
SELECT count(*)
FROM Detail
`

func (q *Queries) CountDetails(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countDetailsStmt, CountDetails)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateDetail = `-- name: CreateDetail :execresult
INSERT INTO Detail (desc, img_url, todo_id)
VALUES (?, ?, ?)
`

type CreateDetailParams struct {
	Desc   string `db:"desc" json:"desc"`
	ImgUrl string `db:"img_url" json:"img_url"`
	TodoID int64  `db:"todo_id" json:"todo_id"`
}

func (q *Queries) CreateDetail(ctx context.Context, arg CreateDetailParams) (sql.Result, error) {
	return q.exec(ctx, q.createDetailStmt, CreateDetail, arg.Desc, arg.ImgUrl, arg.TodoID)
}

const DeleteDetail = `-- name: DeleteDetail :exec
DELETE
FROM Detail
WHERE id = ?
`

func (q *Queries) DeleteDetail(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteDetailStmt, DeleteDetail, id)
	return err
}

const GetDetailById = `-- name: GetDetailById :one
SELECT id, "desc", img_url, todo_id
FROM Detail
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetDetailById(ctx context.Context, id int64) (Detail, error) {
	row := q.queryRow(ctx, q.getDetailByIdStmt, GetDetailById, id)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.Desc,
		&i.ImgUrl,
		&i.TodoID,
	)
	return i, err
}

const GetDetailByTodoId = `-- name: GetDetailByTodoId :one
SELECT id, "desc", img_url, todo_id
FROM Detail
WHERE todo_id = ?
LIMIT 1
`

func (q *Queries) GetDetailByTodoId(ctx context.Context, todoID int64) (Detail, error) {
	row := q.queryRow(ctx, q.getDetailByTodoIdStmt, GetDetailByTodoId, todoID)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.Desc,
		&i.ImgUrl,
		&i.TodoID,
	)
	return i, err
}

const GetDetails = `-- name: GetDetails :many
SELECT id, "desc", img_url, todo_id
FROM Detail
`

func (q *Queries) GetDetails(ctx context.Context) ([]Detail, error) {
	rows, err := q.query(ctx, q.getDetailsStmt, GetDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Detail
	for rows.Next() {
		var i Detail
		if err := rows.Scan(
			&i.ID,
			&i.Desc,
			&i.ImgUrl,
			&i.TodoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDetailsByIds = `-- name: GetDetailsByIds :many
SELECT id, "desc", img_url, todo_id
FROM Detail
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetDetailsByIds(ctx context.Context, ids []int64) ([]Detail, error) {
	query := GetDetailsByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Detail
	for rows.Next() {
		var i Detail
		if err := rows.Scan(
			&i.ID,
			&i.Desc,
			&i.ImgUrl,
			&i.TodoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDetailsByTodoIds = `-- name: GetDetailsByTodoIds :many
SELECT id, "desc", img_url, todo_id
FROM Detail
WHERE todo_id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetDetailsByTodoIds(ctx context.Context, ids []int64) ([]Detail, error) {
	query := GetDetailsByTodoIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Detail
	for rows.Next() {
		var i Detail
		if err := rows.Scan(
			&i.ID,
			&i.Desc,
			&i.ImgUrl,
			&i.TodoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDetail = `-- name: UpdateDetail :execresult
UPDATE Detail
SET desc    = CASE WHEN ? IS NOT NULL THEN ? ELSE desc END,
    img_url = CASE WHEN ? IS NOT NULL THEN ? ELSE img_url END,
    todo_id = CASE WHEN ? IS NOT NULL THEN ? ELSE todo_id END
WHERE id = ?
`

type UpdateDetailParams struct {
	Desc   interface{} `db:"desc" json:"desc"`
	ImgUrl interface{} `db:"img_url" json:"img_url"`
	TodoID interface{} `db:"todo_id" json:"todo_id"`
	ID     int64       `db:"id" json:"id"`
}

func (q *Queries) UpdateDetail(ctx context.Context, arg UpdateDetailParams) (sql.Result, error) {
	return q.exec(ctx, q.updateDetailStmt, UpdateDetail,
		arg.Desc,
		arg.ImgUrl,
		arg.TodoID,
		arg.ID,
	)
}
