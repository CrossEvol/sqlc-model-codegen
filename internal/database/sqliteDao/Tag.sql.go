// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Tag.sql

package sqliteDao

import (
	"context"
	"database/sql"
	"strings"
)

const CountTags = `-- name: CountTags :one
SELECT count(*)
FROM Tag
`

func (q *Queries) CountTags(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTagsStmt, CountTags)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountTagsByParentId = `-- name: CountTagsByParentId :one
SELECT count(*)
FROM Tag
WHERE parent_id = ?
`

func (q *Queries) CountTagsByParentId(ctx context.Context, parentID *int64) (int64, error) {
	row := q.queryRow(ctx, q.countTagsByParentIdStmt, CountTagsByParentId, parentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTag = `-- name: CreateTag :execresult
INSERT INTO Tag (name, parent_id)
VALUES (?, ?)
`

type CreateTagParams struct {
	Name     string `db:"name" json:"name"`
	ParentID *int64 `db:"parent_id" json:"parent_id"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (sql.Result, error) {
	return q.exec(ctx, q.createTagStmt, CreateTag, arg.Name, arg.ParentID)
}

const DeleteTag = `-- name: DeleteTag :exec
DELETE
FROM Tag
WHERE id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTagStmt, DeleteTag, id)
	return err
}

const GetTag = `-- name: GetTag :one
SELECT id, name, parent_id
FROM Tag
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.queryRow(ctx, q.getTagStmt, GetTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.ParentID)
	return i, err
}

const GetTags = `-- name: GetTags :many
SELECT id, name, parent_id
FROM Tag
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.query(ctx, q.getTagsStmt, GetTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTagsByIds = `-- name: GetTagsByIds :many
SELECT id, name, parent_id
FROM Tag
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetTagsByIds(ctx context.Context, ids []int64) ([]Tag, error) {
	query := GetTagsByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTagsByParentId = `-- name: GetTagsByParentId :many
SELECT id, name, parent_id
FROM Tag
WHERE parent_id = ?
`

func (q *Queries) GetTagsByParentId(ctx context.Context, parentID *int64) ([]Tag, error) {
	rows, err := q.query(ctx, q.getTagsByParentIdStmt, GetTagsByParentId, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTag = `-- name: UpdateTag :execresult
UPDATE Tag
SET name      = CASE WHEN ? IS NOT NULL THEN ? ELSE name END,
    parent_id = CASE WHEN ? IS NOT NULL THEN ? ELSE parent_id END
WHERE id = ?
`

type UpdateTagParams struct {
	Name     interface{} `db:"name" json:"name"`
	ParentID interface{} `db:"parent_id" json:"parent_id"`
	ID       int64       `db:"id" json:"id"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (sql.Result, error) {
	return q.exec(ctx, q.updateTagStmt, UpdateTag, arg.Name, arg.ParentID, arg.ID)
}
