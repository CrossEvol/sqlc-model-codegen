// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Category.sql

package sqliteDao

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const CountCategories = `-- name: CountCategories :one
SELECT count(*)
FROM Category
`

func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countCategoriesStmt, CountCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateCategory = `-- name: CreateCategory :execresult
INSERT INTO Category (name, desc, created_at, updated_at)
VALUES (?, ?, ?, ?)
`

type CreateCategoryParams struct {
	Name      string     `db:"name" json:"name"`
	Desc      string     `db:"desc" json:"desc"`
	CreatedAt *time.Time `db:"created_at" json:"created_at"`
	UpdatedAt *time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createCategoryStmt, CreateCategory,
		arg.Name,
		arg.Desc,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const DeleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM Category
WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCategoryStmt, DeleteCategory, id)
	return err
}

const GetCategories = `-- name: GetCategories :many
SELECT id, name, "desc", created_at, updated_at
FROM Category
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.query(ctx, q.getCategoriesStmt, GetCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Desc,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCategoriesByIds = `-- name: GetCategoriesByIds :many
SELECT id, name, "desc", created_at, updated_at
FROM Category
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetCategoriesByIds(ctx context.Context, ids []int64) ([]Category, error) {
	query := GetCategoriesByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Desc,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCategory = `-- name: GetCategory :one
SELECT id, name, "desc", created_at, updated_at
FROM Category
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.queryRow(ctx, q.getCategoryStmt, GetCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Desc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCategory = `-- name: UpdateCategory :execresult
UPDATE Category
SET name       = CASE WHEN ? IS NOT NULL THEN ? ELSE name END,
    desc       = CASE WHEN ? IS NOT NULL THEN ? ELSE desc END,
    created_at = CASE WHEN ? IS NOT NULL THEN ? ELSE created_at END,
    updated_at = CASE WHEN ? IS NOT NULL THEN ? ELSE updated_at END
WHERE id = ?
`

type UpdateCategoryParams struct {
	Name      interface{} `db:"name" json:"name"`
	Desc      interface{} `db:"desc" json:"desc"`
	CreatedAt interface{} `db:"created_at" json:"created_at"`
	UpdatedAt interface{} `db:"updated_at" json:"updated_at"`
	ID        int64       `db:"id" json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.updateCategoryStmt, UpdateCategory,
		arg.Name,
		arg.Desc,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
}
