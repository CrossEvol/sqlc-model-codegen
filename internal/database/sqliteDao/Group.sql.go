// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: Group.sql

package sqliteDao

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const CountGroups = `-- name: CountGroups :one
SELECT count(*)
FROM [Group]
`

func (q *Queries) CountGroups(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGroupsStmt, CountGroups)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGroup = `-- name: CreateGroup :execresult
INSERT INTO [Group] (name, desc, created_at, updated_at)
VALUES (?, ?, ?, ?)
`

type CreateGroupParams struct {
	Name      string     `db:"name" json:"name"`
	Desc      string     `db:"desc" json:"desc"`
	CreatedAt *time.Time `db:"created_at" json:"created_at"`
	UpdatedAt *time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupStmt, CreateGroup,
		arg.Name,
		arg.Desc,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const DeleteGroup = `-- name: DeleteGroup :exec
DELETE
FROM [Group]
WHERE id = ?
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteGroupStmt, DeleteGroup, id)
	return err
}

const GetGroup = `-- name: GetGroup :one
SELECT id, name, "desc", created_at, updated_at
FROM [Group]
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.queryRow(ctx, q.getGroupStmt, GetGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Desc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGroups = `-- name: GetGroups :many
SELECT id, name, "desc", created_at, updated_at
FROM [Group]
`

func (q *Queries) GetGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.query(ctx, q.getGroupsStmt, GetGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Desc,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetGroupsByIds = `-- name: GetGroupsByIds :many
SELECT id, name, "desc", created_at, updated_at
FROM [Group]
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetGroupsByIds(ctx context.Context, ids []int64) ([]Group, error) {
	query := GetGroupsByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Desc,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGroup = `-- name: UpdateGroup :execresult
UPDATE [Group]
SET name       = CASE WHEN ? IS NOT NULL THEN ? ELSE name END,
    desc       = CASE WHEN ? IS NOT NULL THEN ? ELSE desc END,
    created_at = CASE WHEN ? IS NOT NULL THEN ? ELSE created_at END,
    updated_at = CASE WHEN ? IS NOT NULL THEN ? ELSE updated_at END
WHERE id = ?
`

type UpdateGroupParams struct {
	Name      interface{} `db:"name" json:"name"`
	Desc      interface{} `db:"desc" json:"desc"`
	CreatedAt interface{} `db:"created_at" json:"created_at"`
	UpdatedAt interface{} `db:"updated_at" json:"updated_at"`
	ID        int64       `db:"id" json:"id"`
}

func (q *Queries) UpdateGroup(ctx context.Context, arg UpdateGroupParams) (sql.Result, error) {
	return q.exec(ctx, q.updateGroupStmt, UpdateGroup,
		arg.Name,
		arg.Desc,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
}
